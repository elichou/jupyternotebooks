{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Transformation visuelle pour reconstruction d'image corporelle"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Objectifs\n",
    "L'objectif est d'améliorer le code de network2_01.py. \n",
    "Plusieurs pistes d'amélioration sont possibles:\n",
    "1. Utiliser un produit tensoriel plutôt qu'un produit terme à terme.\n",
    "2. Différencier la cible de la main.\n",
    "3. Intégerer tf.\n",
    "4. changer la répartition des points. \n",
    "\n",
    "Je m'inspire de l'article de Memisevic, Gradient-based learning of higher-order image features et de son code gatedAutoencoder.py."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Imports et setup\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "from numpy import *\n",
    "from matplotlib.pylab import *\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "from drawnow import *\n",
    "from skimage.draw import line, line_aa\n",
    "from scipy.ndimage import gaussian_filter\n",
    "from keras.models import Model\n",
    "from keras.layers import Activation, Dense, Input, Multiply\n",
    "from keras.layers import Conv2D, Flatten, Reshape, Conv2DTranspose\n",
    "from keras.layers import Dot, Lambda, Concatenate, RepeatVector\n",
    "from keras import backend as K\n",
    "from keras.utils import plot_model \n",
    "from PIL import Image\n",
    "from keras.constraints import max_norm, non_neg\n",
    "\n",
    "import time \n",
    "import random\n",
    "import scipy\n",
    "import math\n",
    "import cv2\n",
    "import cPickle as pickle\n",
    "\n",
    "import keras\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "matplotlib.rcParams.update({'font.size':16})\n",
    "to_backup = True\n",
    "timeframe = time.strftime('%Y%m%d%H%M%S')\n",
    "L1 = 16\n",
    "L2 = 8\n",
    "L3 = 1\n",
    "\n",
    "nb_posture = 300\n",
    "nb_command = 60\n",
    "nb_joint = 3\n",
    "nb_data = nb_command*nb_posture\n",
    "img_size = 64"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Construction de la base de données"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. On génère n postures différentes aléatoirement, X.\n",
    "2. On génère m commandes aléatoirement, H. \n",
    "3. On applique chaque commande à chaque posture et on obtient des nouvelles postures Y."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Génération des postures initiales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def randrange(n , vmin, vmax):\n",
    "    return (vmax-vmin)*rand(n) + vmin "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "posture = zeros((nb_posture, 3))\n",
    "posture[:,0] = randrange(nb_posture, 0, pi)\n",
    "posture[:,1] = randrange(nb_posture, 0, pi)\n",
    "posture[:,2] =randrange(nb_posture, 0, pi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(300, 3)\n",
      "[2.80080382 0.69583626 0.95435066]\n"
     ]
    }
   ],
   "source": [
    "print(shape(posture))\n",
    "print(posture[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Génération des commandes "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "command = zeros((nb_command, 3))\n",
    "command[:,0] = randrange(nb_command, 0, 1) #*0.6\n",
    "command[:,1] = randrange(nb_command, 0, 1) #*0.6\n",
    "command[:,2] = randrange(nb_command, 0, 1) #*0.6"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Génération des données d'entraînement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data_x = zeros((nb_data, 1, 3))\n",
    "train_data_y = zeros((nb_data, 1, 3))\n",
    "train_data_h = zeros((nb_data, 1, 3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "idx = 0 \n",
    "for i in range(nb_posture):\n",
    "    for j in range(nb_command):\n",
    "        train_data_x[idx] = posture[i]\n",
    "        idx = idx + 1\n",
    "\n",
    "idx = 0 \n",
    "for i in range(nb_posture):\n",
    "    for j in range(nb_command):\n",
    "        train_data_y[idx] = posture[i]  + command[j]\n",
    "        idx = idx + 1\n",
    "        \n",
    "idx = 0 \n",
    "for i in range(nb_posture):\n",
    "    for j in range(nb_command):\n",
    "        train_data_h[idx] = command[j]\n",
    "        idx = idx + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('train_data_x 0 0 ', array([2.80080382, 0.69583626, 0.95435066]))\n",
      "('train_data_h 0 0 ', array([0.10096825, 0.22404304, 0.46675509]))\n",
      "('train_data_y 0 0 ', array([2.90177207, 0.9198793 , 1.42110575]))\n",
      "y = x + h\n"
     ]
    }
   ],
   "source": [
    "print('train_data_x 0 0 ', train_data_x[0][0])\n",
    "print('train_data_h 0 0 ', train_data_h[0][0])\n",
    "print('train_data_y 0 0 ', train_data_y[0][0])\n",
    "print('y = x + h')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Génération des images associées"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_images_x = zeros((nb_data, 1, img_size, img_size ), dtype = float32)\n",
    "train_images_y = zeros((nb_data, 1, img_size, img_size ), dtype = float32)\n",
    "train_command = zeros((nb_data, 1, img_size, img_size ) , dtype = float32)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On peut rajouter une gaussienne au bout de l'effecteur pour le mettre en évidence\n",
    "TODO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def makeGaussian(size, fwhm = 3, center=None):\n",
    "    \"\"\" Make a square gaussian kernel.\n",
    "    size is the length of a side of the square\n",
    "    fwhm is full-width-half-maximum, which\n",
    "    can be thought of as an effective radius.\n",
    "    \"\"\"\n",
    "    x = arange(0, size, 1, float)\n",
    "    y = x[:,newaxis]\n",
    "    if center is None:\n",
    "        x0 = y0 = size // 2\n",
    "    else:\n",
    "        x0 = center[0]\n",
    "        y0 = center[1]    \n",
    "    return exp(-4*log(2) * ((x-x0)**2 + (y-y0)**2) / fwhm**2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(nb_data):\n",
    "    img = zeros((img_size,img_size), dtype = uint8)\n",
    "    angle = train_data_x[i][0] \n",
    "    row1, col1 = img_size//2 + int(floor(L1*sin(angle[0]))), img_size//2 + int(floor(L1*cos(angle[0])))\n",
    "    row2, col2 =  int(floor(L2*sin(angle[1]))) + row1, col1 + int(floor(L2*cos(angle[1])))\n",
    "    row3, col3 = int(floor(L3*sin(angle[2])))+ row2, col2 +  int(floor(L3*cos(angle[2])))\n",
    "    r1, c1, val1 = line_aa(img_size//2,img_size//2,row1, col1)\n",
    "    r2, c2, val2 = line_aa(row1, col1, row2, col2)\n",
    "    r3, c3, val3 = line_aa(row2, col2, row3 , col3)\n",
    "    #r1, c1 = line(img_size//2,img_size//2,row1, col1)\n",
    "    #r2, c2 = line(row1, col1, row2, col2)\n",
    "    #r3, c3 = line(row2, col2, row3 , col3)\n",
    "    img[r1,c1] = val1 *255\n",
    "    img[r2,c2] = val2 *255\n",
    "    img[r3,c3] = val3 *255\n",
    "    train_images_x[i][0] = gaussian_filter(img , sigma = 1) / 255.\n",
    "\n",
    "for i in range(nb_data):\n",
    "    img = zeros((img_size,img_size), dtype = uint8)\n",
    "    angle = train_data_y[i][0] \n",
    "    row1, col1 = img_size//2 + int(floor(L1*sin(angle[0]))), img_size//2 + int(floor(L1*cos(angle[0])))\n",
    "    row2, col2 =  int(floor(L2*sin(angle[1]))) + row1, col1 + int(floor(L2*cos(angle[1])))\n",
    "    row3, col3 = int(floor(L3*sin(angle[2])))+ row2, col2 +  int(floor(L3*cos(angle[2])))\n",
    "    r1, c1, val1 = line_aa(img_size//2,img_size//2,row1, col1)\n",
    "    r2, c2, val2 = line_aa(row1, col1, row2, col2)\n",
    "    r3, c3, val3 = line_aa(row2, col2, row3 , col3)\n",
    "    #r1, c1 = line(img_size//2,img_size//2,row1, col1)\n",
    "    #r2, c2 = line(row1, col1, row2, col2)\n",
    "    #r3, c3 = line(row2, col2, row3 , col3)\n",
    "    img[r1,c1] = val1 *255\n",
    "    img[r2,c2] = val2 *255\n",
    "    img[r3,c3] = val3 *255\n",
    "    train_images_y[i][0] =gaussian_filter(img , sigma = 1) / 255.\n",
    "    \n",
    "for i in range(nb_data):\n",
    "    img = zeros((img_size, img_size), dtype = float32)\n",
    "    img[0][0] = train_data_h[i][0][0]\n",
    "    img[0][1] = train_data_h[i][0][1]\n",
    "    img[0][2] = train_data_h[i][0][2]\n",
    "    train_command[i][0] = img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('taille train_images_x', (18000, 1, 64, 64))\n",
      "('taille train_images_y', (18000, 1, 64, 64))\n",
      "('taille train_features', (18000, 2, 64, 64))\n",
      "('taille train_features_command', (18000, 3, 64, 64))\n",
      "('taille train_command', (18000, 1, 64, 64))\n"
     ]
    }
   ],
   "source": [
    "print('taille train_images_x', shape(train_images_x))\n",
    "print('taille train_images_y', shape(train_images_y))\n",
    "train_features = concatenate((train_images_x, train_images_y), 1)\n",
    "train_features_command = concatenate((train_images_x, train_images_y, train_command), 1)\n",
    "print('taille train_features', shape(train_features))\n",
    "print('taille train_features_command', shape(train_features_command))\n",
    "print('taille train_command', shape(train_command))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[0.20441577, 0.9577738 , 0.9639927 , ..., 0.        ,\n",
       "         0.        , 0.        ],\n",
       "        [0.        , 0.        , 0.        , ..., 0.        ,\n",
       "         0.        , 0.        ],\n",
       "        [0.        , 0.        , 0.        , ..., 0.        ,\n",
       "         0.        , 0.        ],\n",
       "        ...,\n",
       "        [0.        , 0.        , 0.        , ..., 0.        ,\n",
       "         0.        , 0.        ],\n",
       "        [0.        , 0.        , 0.        , ..., 0.        ,\n",
       "         0.        , 0.        ],\n",
       "        [0.        , 0.        , 0.        , ..., 0.        ,\n",
       "         0.        , 0.        ]]], dtype=float32)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_command[100]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Corruption des données"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "TODO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Enregistrement des données d'entraînement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#pickle.dump(train_features, open(\"gen_data/train_features.p\", \"wb\"))\n",
    "#pickle.dump(train_images_x, open(\"gen_data/train_images_x.p\", \"wb\"))\n",
    "#pickle.dump(train_data_h, open(\"gen_data/train_data_h.p\", \"wb\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exemples d'images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f1d0609bc10>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQYAAAECCAYAAAAcpHkqAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi40LCBodHRwOi8vbWF0cGxvdGxpYi5vcmcv7US4rQAAEIxJREFUeJzt3X+wnFV9x/H3NxBuuEku3PBDJZDEiNUhg9ZOLHTClCYyQh0ItuqMtqMVx8ZaR+1YYQZtp62FsVqmOo4/CtLOtEX9o4gSZzpUIpHO2Nga668ERCAhJCBCSMhvfiT32z927+4+e5bcTbJ79yb3/ZrZ2XOfc+7dc58bPpxznt3nRGYiSa1mDLoDkqYeg0FSwWCQVDAYJBUMBkkFg0FSoafBEBHnRcTtEbErInZHxB0RsaCXryGp/6JX72OIiGHgJ8BzwF8ACdwADAOvycx9PXkhSX13cg9/1h8Di4FXZeZDABHxU+BB4H3AP/TwtST1US9HDN8BZmXmsrbj9wJk5qU9eSFJfdfLEcMS4M4OxzcCb5vom0+JoZzF7B52R1K7PezcnplnTdSul8EwD9jZ4fgOYHSib57FbC6KN/SwO5Larcnbt3TTrpfBcMQiYhWwCmAWw4PsiqQWvbxcuZPOI4MXG0mQmbdk5tLMXDqToR52RdKx6GUwbKS2ztDuAuC+Hr6OpD7rZTCsBi6OiMXjByJiEbCsXifpONHLYPgy8AhwZ0RcHRErqV2l2Arc3MPXkdRnPQuG+jsbVwC/AP4N+AqwGViRmXt79TqS+q+nVyUy81HgLb38mZImn5+ulFQwGCQVDAZJBYNBUsFgkFQwGCQVDAZJBYNBUsFgkFQwGCQVDAZJBYNBUsFgkFQwGCQVDAZJBYNBUsFgkFQwGCQVDAZJBYNBUsFgkFQwGCQVDAZJBYNBUsFgkFQwGCQVDAZJBYNBUsFgkFQwGCQVDAZJBYNBUsFgkFQwGCQVDAZJBYNBUsFgkFQwGCQVDAZJBYNBUsFgkFQwGCQVDAZJBYNBUsFgkFQwGCQVDAZJBYNBUsFgkFQwGCQVDAZJBYNBUsFgkFQwGCQVDAZJhQmDISLeGhFfj4gtEXEgIh6IiE9GxNy2dqMRcWtEbI+IfRGxJiIu7F/XJfVLNyOGjwKHgI8BVwBfAt4P3B0RMwAiIoBv1es/CLwFmAmsjYhz+9BvSX10chdtrsrMp1q+vjcidgD/AvwOcA+wElgGrMjMtQARsQ7YDFwHfKiXnZbUXxOOGNpCYdwP6s/z688rgcfHQ6H+fbuojSKuPtZOSppcR7v4eGn9+f768xJgQ4d2G4EFETHnKF9H0gAccTBExHzgE8CazFxfPzwP2Nmh+Y768+jRdU/SIHSzxtBQ/z//ncBB4JpjffGIWAWsApjF8LH+OEk90vWIISJOpbZmsBi4PDO3tVTvpPOoYF5LfSEzb8nMpZm5dCZD3XZFUp91FQwRMRO4HVgKvCkzf9bWZCO1dYZ2FwCPZubeY+qlpEnVzRucZgBfAVYAb87M73dothqYHxGXtnzfCHBVvU7ScaSbNYYvAG8DbgT2RcTFLXXb6lOK1cA64LaIuJba1OF6IIBP97bLkvqtm6nE79afP07tP/7Wx3sBMnMMuBK4G/gi8A1q75Zcnplbe9xnSX024YghMxd184MycwfwnvpD0nHMT1dKKhgMkgoGg6SCwSCpYDBIKhgMkgoGg6SCwSCpYDBIKhgMkgoGg6SCwSCpYDBIKhgMkgoGg6SCwSCpYDBIKhgMkgoGg6SCwSCpYDBIKhgMkgoGg6SCwSCpYDBIKnSzd6WmmZh5SqM8Y87sat3wqY1yHjzYLO+pbmg+tn9/n3qnyeCIQVLBYJBUMBgkFVxjOJHNOKn65ayhRjnmzmlWnDa30u75+ac1yrsXDlXqDpwdjfLJLcsKZ6/fU32tDQ83yq43HH8cMUgqGAySCk4ljkctU4TW6QG0TRHOOL1Sd+C8kUZ596KZzfIrqj9+5uLmtOA3ztlUqXvF7Kca5W9ufk3zZ+w8rdJudFPzsiZOJY47jhgkFQwGSQWnElNJ6xRh9nC1aqR55WDsrOYUYf+5cyrtnnlF80+6d9FYpW7Oy3c1yhef80ij/JtzN1fandFyueHB515Sqfv2ry5olA/8vNmPsx9/ttIu9x9Axy9HDJIKBoOkgsEgqeAaQ5+1flIRqp9WjLZPLh46u3nJb+/CtrWDxc31h72Lm59qfOnLn660u+zs5nrBRXMfrtSdEoca5R/tX9go37btokq7R7ac1SgPb6r2f2Rzc91i8S92N8ozNj1eaXfo2efQ8csRg6SCwSCp4FSiD04aHW2Uc+HLKnW7z29ednzm/OqHnPad/3yjvGjhE5W63z/7oUb5dcNbGuXns/oz/mdP822Mn3n4skrdE5vPaJTnbGr+6U/fdKjS7lVbmpcrT3qy2o/cu69RHmspH3rheXTicMQgqWAwSCoYDJIKrjH0yIy5zbWDF16zqFHecvmsSrv5r29e1nv//P+r1L16qFn32Aujlbrv7X5lo/xXm69qlPdurn6qcc4jzaw//eGDlbpXb2uuHcx46plGeWx39SYrY/uan4Y8OFZdf9D04IhBUsFgkFRwKtEjMdR8h+DOX2tOH5Zf9uNKu5vPXdcoP3loX6Xu+scub5TX/mBJpe60+5uXJec93Lw0OH/rjmpHnm5OEYq9HlrejTjmFEGH4YhBUsFgkFRwKtErh5ofLjr16Wb5R0+dW2m282XNFf9nMyt1P3pyfqN85g+rmX3m/25vlHPrL5svu6/tfopOEdQDjhgkFQwGSYWjCoaIuCsiMiJuaDs+GhG3RsT2iNgXEWsi4sLedFXSZDniNYaIeAfw2g7HA/gWsAj4ILATuB5YGxG/npnbjq2rU9uhXc2blsz96ZON8oE7Xlppt+zAqkb5z5esqdRdtXBDo/yvFy+r1A3tbr4TcmRPc10h226Ikq4xqAeOaMQQEaPAZ4CPdKheCSwD3pmZX8vMu+rHZgDXHWtHJU2eI51KfArYkJlf61C3Eng8M9eOH8jMXdRGEVcffRclTbaupxIRcQnwLjpMI+qWABs6HN8IvCsi5mTm3g71J4aWIfzYlsca5Zd8+4VKsz3bz2mUb7ysmpdX/lbzQ1V/esl3KnW3jjanFs+NnNcon3Vv9UYtB7e0zNicVugodTViiIhTgJuBmzLzgRdpNo/aukK78ffsjnaokzQFdTtiuA44Fbixly8eEauAVQCzGJ6gtaTJMmEwRMQC4OPAe4GhiGjdXnkoIk4H9lAbLXQaFcyrPxejicy8BbgFYCTmZXu9pMHoZsSwGJgF3Nah7qP1x+uorSW8sUObC4BHT+j1hTbZcmPUg4/9slI350BzT8fFuxdW6u7at7RRvuKy9ZW6v33dnY3yJ2Ze2Sjv3l29HDr3meZl00M7O83spIl1Eww/BpZ3OL6WWlj8E/AQsBq4JiIuzcx7ASJiBLgK+GpvuitpMkwYDJn5DPDd9uO19zOxJTO/W/96NbAOuC0irqX5BqcAPt2zHkvqu559ujIzxyLiSuAm4IvUph/rgOWZubVXr3PcabtkeGh7c0u5meurezEsenZxo3z3gddX6u7/7eaUYXio+X3PjVQvLM09yY+/6NgddTBkZnQ4tgN4T/0h6Tjl/14kFbxRywCN7anetv2knzzYKC/as6BS98wvmjdxGRtuDtbOuK96sSf3H0A6Vo4YJBUMBkkFg0FSwTWGKWRsf8uNXe97sFI3+thI84uWS5LtawqVnyEdJUcMkgoGg6SCU4mpqv0dk34gSpPIEYOkgsEgqWAwSCoYDJIKBoOkgsEgqWAwSCoYDJIKBoOkgsEgqWAwSCoYDJIKBoOkgsEgqWAwSCoYDJIKBoOkgsEgqWAwSCoYDJIKBoOkgsEgqWAwSCoYDJIKBoOkgsEgqWAwSCoYDJIKBoOkgsEgqWAwSCoYDJIKBoOkgsEgqWAwSCoYDJIKBoOkgsEgqWAwSCoYDJIKBoOkgsEgqWAwSCoYDJIKBoOkgsEgqdB1METEmyLivyJib0Tsjoj1EbGipX40Im6NiO0RsS8i1kTEhf3ptqR+6ioYIuJ9wJ3AD4HfA94G/DswXK8P4FvAFcAHgbcAM4G1EXFu77stqZ9OnqhBRCwCPgtcm5mfban6z5bySmAZsCIz19a/bx2wGbgO+FCP+itpEnQzYngPMAb842HarAQeHw8FgMzcRW0UcfUx9VDSpOsmGC4Bfg68PSIejoiDEfFQRHygpc0SYEOH790ILIiIOT3oq6RJ0k0wnAO8Evh74O+ANwJ3A5+PiA/X28wDdnb43h3159Fj7KekSTThGgO18JgLvDsz76gfu6e+9nB9RHzuaF88IlYBqwBm1dYxJU0B3YwYnq4/3912/NvAS4CXURstdBoVzKs/dxpNkJm3ZObSzFw6k6EuuiJpMnQTDBsnqB+rt1nSoe4C4NHM3HukHZM0ON0Ewzfqz5e3Hb8C2JaZTwCrgfkRcel4ZUSMAFfV6yQdR7pZY/gPYC1wc0ScCWyi9ganNwLX1NusBtYBt0XEtdSmDtcDAXy6152W1F8TBkNmZkS8Gfgk8DfU1hJ+DvxhZn613mYsIq4EbgK+CMyiFhTLM3NrvzovqT8iMwfdBwBGYl5eFG8YdDekE9qavP2Hmbl0onZ+ulJSwWCQVDAYJBUMBkkFg0FSYcpclYiIp4AtwJnA9gF3ZyrxfFR5PqqO9HwszMyzJmo0ZYJhXESs7+ZyynTh+ajyfFT163w4lZBUMBgkFaZiMNwy6A5MMZ6PKs9HVV/Ox5RbY5A0eFNxxCBpwKZEMETEeRFxe0Tsqm9mc0dELBh0v/otIt4aEV+PiC0RcSAiHoiIT0bE3LZ203Yzn4i4KyIyIm5oOz5tzskgNnsaeDBExDBwD/Bq4I+Ad1K7+ezaiJg9yL5Ngo8Ch4CPUbvxzZeA9wN3R8QMmN6b+UTEO4DXdjg+bc7JwDZ7ysyBPoAPU/uP4/yWYy8HDgIfGXT/+vy7n9Xh2LuApLZ5D9T25Uhq97YYb3MatTtwf27Qv0Mfz80o8ATwjvrvf0NL3bQ4J8Ai4ADwZ4dp05dzMfARA7XNar6fmQ+NH8jMzcD3OME3q8nMpzoc/kH9eX79ebpu5vMpYENmfq1D3XQ5JwPb7GkqBMPhNqu5YJL7MhWM3zfz/vrztNvMJyIuoTZy+sCLNJku52Rgmz1NhWA43GY102qjmoiYD3wCWJOZ6+uHp9VmPhFxCnAzcFNmPvAizabLORnYZk/d3AxWk6Ce7HdSW1u5ZoLmJ7LrgFOBGwfdkSmgb5s9dfPCg3a4zWo6blRzoomIU6nNCRcDl2fmtpbqo9rM53hUv0T9ceAvgaGIOD0iTq9Xj399EtPnnPRts6eJTIVgONxmNfdNcl8mXUTMBG4HlgJvysyftTWZTpv5LKZ2h/HbqP2DHn9A7dLuTuBCps85GdhmT1MhGFYDF0fE4vED9aHSMk7wzWrq71X4CrACeHNmfr9Ds+m0mc+PgeUdHlALi+XAQ0yfczK4zZ6mwLXa2dT+2D+jdnllJfATahvbzBl0//r8u3+J+jV64OK2x7n1NjOA/wa2Am+v/yP5LrXFpfMG/TtM0nlqfx/DtDgn1DZsuofalOJPqC0+frl+Pt7dz3Mx8F++/sstAL4O7Ab2AN8EFg26X5Pwez9S/yN3evx1S7t5wD/X/9j7ge8Arx10/yfxPFWCYTqdE2AE+ALwK+B54KfAH/T7XPjpSkmFqbDGIGmKMRgkFQwGSQWDQVLBYJBUMBgkFQwGSQWDQVLBYJBU+H/W4udh0r0AigAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "imshow(train_images_x[0][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f1d0603a150>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "imshow(train_images_y[0][0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Factorized Gated Field Auto-encoder"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Avant le passge dans l'autoencodeur, les images sont factorisées en passant par une couche de percpetron. De même, la couche latente est factorisée.\n",
    "Les images sont de taille (128,128), on prend pour commencer 32 neurones. \n",
    "La sortie est de taille (3,1) (trois moteurs), on prend pour commencer une factorisation de taille (32,1) (synérgies motrices)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On a donc un encodeur, un décodeur et 3 couches de perceptrons pour les deux images et pour les commandes motrices."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On commence par construire un auto encodeur dont les entrées sont un tenseur de taille (32,1) et de sortie (32,1), pour garder la symétrie de la structure.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Auto-encodeur alternatif"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Au lieu de redonner la représentation fx de l'image d'entrée dans le décodeur, on donne la représentation de la posture. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n",
      "(None, 100, 100)\n",
      "('out taille', (None, 1, 103))\n"
     ]
    }
   ],
   "source": [
    "input_size = 128\n",
    "input_shape = (2, input_size, input_size)\n",
    "latent_dim = 100 # plus facile pour la concaténation des outputs...\n",
    "\n",
    "# on donne en entrée des pairs d'images\n",
    "inputs_xy = Input(shape = (3, img_size, img_size, ), name = 'xy')\n",
    "\n",
    "# on sépare chacune des images\n",
    "x = Lambda(lambda x: x[:,0,:,:])(inputs_xy)\n",
    "x = Reshape((1,img_size, img_size,))(x)\n",
    "\n",
    "y = Lambda(lambda x: x[:,1,:,:])(inputs_xy)\n",
    "y = Reshape((1,img_size, img_size,))(y)\n",
    "\n",
    "# on sépare également les postures\n",
    "pos = Lambda(lambda x: x[:,2,:3,0])(inputs_xy)\n",
    "pos = Reshape((1,3,))(pos)\n",
    "\n",
    "# on factorise chacune des images\n",
    "fx = Flatten()(x)\n",
    "fx = Dense(latent_dim, activation = 'relu', name = 'latent_fx1')(fx)\n",
    "fx = Dense(latent_dim, activation = 'relu', name = 'latent_fx2')(fx)\n",
    "fx = Dense(latent_dim, activation = 'relu', name = 'latent_fx3')(fx)\n",
    "fx = Reshape((latent_dim,1,))(fx)\n",
    "\n",
    "fy = Flatten()(y)\n",
    "fy = Dense(latent_dim, activation = 'relu', name = 'latent_fy1')(fy)\n",
    "fy = Dense(latent_dim, activation = 'relu', name = 'latent_fy2')(fy)\n",
    "fy = Dense(latent_dim, activation = 'relu', name = 'latent_fy3')(fy)\n",
    "fy = Reshape((1,latent_dim,))(fy)\n",
    "\n",
    "\n",
    "# on multiplie les deux factorisations, TODO mieux si produit tensoriel\n",
    "matmul = Multiply()([fx, fy])\n",
    "print(K.int_shape(matmul))\n",
    "\n",
    "# on passe le tout dans une couche de perceptrons pour obtenir les synérgies motrices\n",
    "x = Flatten()(matmul)\n",
    "fh = Dense(latent_dim, name = 'latent_fh1')(x)\n",
    "fh = Dense(latent_dim, name = 'latent_fh2')(x)\n",
    "fh = Dense(latent_dim, name = 'latent_fh3')(x)\n",
    "fh = Dense(latent_dim, name = 'latent_fh4', kernel_constraint=  non_neg())(x)\n",
    "\n",
    "# tricks pour pouvoir passer fx et latent en outputs\n",
    "\n",
    "fh = Reshape((1,latent_dim,))(fh)\n",
    "#latent = Reshape((1,3,))(latent)\n",
    "\n",
    "out = Concatenate()([pos, fh])\n",
    "print('out taille', K.int_shape(out))\n",
    "\n",
    "encoder = Model(inputs = inputs_xy, outputs = out, name = 'encoder_alt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(None, 1, 100)\n",
      "(None, 100)\n",
      "(None, 100, 100)\n"
     ]
    }
   ],
   "source": [
    "latent_inputs = Input(shape = (1,3+latent_dim,), name = 'decoder_input')\n",
    "\n",
    "# on déballe la factorisation en x\n",
    "pos = Lambda(lambda x: x[:,:,:latent_dim])(latent_inputs)\n",
    "print(K.int_shape(pos))\n",
    "#pos = Reshape((3,))(pos)\n",
    "pos = Flatten()(pos)\n",
    "\n",
    "# on déballe les synérgies motrices\n",
    "inp = Lambda(lambda x: x[:,:,latent_dim:])(latent_inputs)\n",
    "inp = Flatten()(inp)\n",
    "\n",
    "# on fait passer la factorisation h dans la couche de perceptrons\n",
    "fhdec = Dense(latent_dim, name='latent_fhdec1')(inp)\n",
    "fhdec = Dense(latent_dim, name='latent_fhdec2')(fhdec)\n",
    "fhdec = Dense(latent_dim, name='latent_fhdec3')(fhdec)\n",
    "fhdec = Reshape((1,latent_dim,))(fhdec)\n",
    "\n",
    "# on fait passer la posture dans la couche de perceptrons\n",
    "fposdec = Dense(latent_dim, name='latent_fxdec1')(pos)\n",
    "fposdec = Dense(latent_dim, name='latent_fxdec2')(fposdec)\n",
    "fposdec = Dense(latent_dim, name='latent_fxdec3')(fposdec)\n",
    "fposdec = Dense(latent_dim, name='latent_fxdec4')(fposdec)\n",
    "print(K.int_shape(fposdec))\n",
    "fposdec = Reshape((latent_dim,1,))(fposdec)\n",
    "\n",
    "# on mutliplie les deux représentations\n",
    "matmuldec = Multiply()([fposdec, fhdec])\n",
    "print(K.int_shape(matmuldec))\n",
    "matmuldec = Flatten()(matmuldec)\n",
    "\n",
    "# on en déduit une factorisation \n",
    "fydec = Dense(latent_dim, name = 'latent_fydec1')(matmuldec)\n",
    "fydec = Dense(latent_dim, name = 'latent_fydec2')(fydec)\n",
    "fydec = Dense(latent_dim, name = 'latent_fydec3')(fydec)\n",
    "# on déduit l'image de départ de cette factorisation\n",
    "ydec = Dense(img_size*img_size, activation = 'relu', name = 'y_recon')(fydec)\n",
    "ydec = Reshape((1,img_size, img_size,))(ydec)\n",
    "\n",
    "\n",
    "decoder = Model(latent_inputs, outputs= ydec, name='decoder')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "xy (InputLayer)              (None, 3, 64, 64)         0         \n",
      "_________________________________________________________________\n",
      "encoder_alt (Model)          (None, 1, 103)            1859900   \n",
      "_________________________________________________________________\n",
      "decoder (Model)              (None, 1, 64, 64)         1494996   \n",
      "=================================================================\n",
      "Total params: 3,354,896\n",
      "Trainable params: 3,354,896\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "autoencoder = Model(inputs_xy, decoder(encoder(inputs_xy)), name = \"autoencoder_alt\")\n",
    "autoencoder.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On enregistre des figures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "plot_model(encoder, to_file='figures_autoencoder/encoder_matmul_alt.png')\n",
    "plot_model(decoder, to_file = 'figures_autoencoder/decoder_matul_alt.png')\n",
    "plot_model(autoencoder, to_file = 'figures_autoencoder/auto_encoder_matmul_alt.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Entraînement de l'autoencodeur"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On entraîne le modèle sur des pairs d'images.\n",
    "On utilise une descente de gradient stochastique. \n",
    "edit: la descente de gradient stochastique n'est pas adapté ici.\n",
    "adam fonctionne bien mieux."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n",
      "Train on 14400 samples, validate on 3600 samples\n",
      "Epoch 1/10\n",
      "14400/14400 [==============================] - 32s 2ms/step - loss: 8.1863e-04 - kullback_leibler_divergence: 1.1842 - acc: 0.4953 - val_loss: 4.9249e-04 - val_kullback_leibler_divergence: 0.9666 - val_acc: 0.7619\n",
      "Epoch 2/10\n",
      "14400/14400 [==============================] - 30s 2ms/step - loss: 4.2055e-04 - kullback_leibler_divergence: 0.8961 - acc: 0.7838 - val_loss: 3.7677e-04 - val_kullback_leibler_divergence: 0.8805 - val_acc: 0.7947\n",
      "Epoch 3/10\n",
      "14400/14400 [==============================] - 29s 2ms/step - loss: 3.3274e-04 - kullback_leibler_divergence: 0.8069 - acc: 0.8175 - val_loss: 3.1789e-04 - val_kullback_leibler_divergence: 0.7496 - val_acc: 0.8062\n",
      "Epoch 4/10\n",
      "14400/14400 [==============================] - 31s 2ms/step - loss: 2.7254e-04 - kullback_leibler_divergence: 0.7410 - acc: 0.8467 - val_loss: 2.6910e-04 - val_kullback_leibler_divergence: 0.7528 - val_acc: 0.8513\n",
      "Epoch 5/10\n",
      "14400/14400 [==============================] - 29s 2ms/step - loss: 2.4058e-04 - kullback_leibler_divergence: 0.6967 - acc: 0.8600 - val_loss: 2.2522e-04 - val_kullback_leibler_divergence: 0.6795 - val_acc: 0.8627\n",
      "Epoch 6/10\n",
      "14400/14400 [==============================] - 29s 2ms/step - loss: 2.1783e-04 - kullback_leibler_divergence: 0.6620 - acc: 0.8694 - val_loss: 2.1045e-04 - val_kullback_leibler_divergence: 0.6535 - val_acc: 0.8750\n",
      "Epoch 7/10\n",
      "14400/14400 [==============================] - 29s 2ms/step - loss: 1.9767e-04 - kullback_leibler_divergence: 0.6321 - acc: 0.8776 - val_loss: 2.0744e-04 - val_kullback_leibler_divergence: 0.6625 - val_acc: 0.8889\n",
      "Epoch 8/10\n",
      "14400/14400 [==============================] - 29s 2ms/step - loss: 1.8559e-04 - kullback_leibler_divergence: 0.6039 - acc: 0.8824 - val_loss: 1.8425e-04 - val_kullback_leibler_divergence: 0.6215 - val_acc: 0.8873\n",
      "Epoch 9/10\n",
      "14400/14400 [==============================] - 29s 2ms/step - loss: 1.7499e-04 - kullback_leibler_divergence: 0.5770 - acc: 0.8867 - val_loss: 1.7402e-04 - val_kullback_leibler_divergence: 0.5557 - val_acc: 0.8866\n",
      "Epoch 10/10\n",
      "14400/14400 [==============================] - 29s 2ms/step - loss: 1.6342e-04 - kullback_leibler_divergence: 0.5649 - acc: 0.8921 - val_loss: 1.6430e-04 - val_kullback_leibler_divergence: 0.5489 - val_acc: 0.8966\n"
     ]
    }
   ],
   "source": [
    "sgd = keras.optimizers.SGD(lr = 0.1, momentum = 0.2)\n",
    "\n",
    "autoencoder.compile(loss = 'mse', \n",
    "                    optimizer = 'adam', \n",
    "                    metrics = ['kullback_leibler_divergence', 'acc'])\n",
    "\n",
    "history = autoencoder.fit(train_features_command,\n",
    "                          train_images_y,\n",
    "                          validation_split = 0.2,\n",
    "                          epochs = 10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualisation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot training & validation accuracy values\n",
    "plt.plot(history.history['acc'])\n",
    "plt.plot(history.history['val_acc'])\n",
    "plt.title('Model accuracy')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Train', 'Test'], loc='upper left')\n",
    "plt.show()\n",
    "\n",
    "# Plot training & validation loss values\n",
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('Model loss')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Train', 'Test'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Décodage"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Image reconstruite"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f1cf9292110>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_decoded = autoencoder.predict(train_features_command)\n",
    "imshow(x_decoded[0][0])\n",
    "#imgs = concatenate([x_decoded[50][0],train_images_y[50][0], train_images_x[50][0] ])\n",
    "#Image.fromarray(imgs).save('exmple_recontr.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Image original"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f1cf9364190>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "imshow(train_images_y[0][0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Image donnée en entrée de l'autoencodeur"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f1cf92ce910>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "imshow(train_images_x[0][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "rows, cols = 10, 30\n",
    "num = rows * cols\n",
    "imgs = np.concatenate([train_images_x[:num], train_images_y[:num], x_decoded[:num]])\n",
    "imgs = imgs.reshape((rows * 3, cols, img_size, img_size))\n",
    "imgs = np.vstack(np.split(imgs, rows, axis=1))\n",
    "imgs = imgs.reshape((rows * 3, -1, img_size, img_size))\n",
    "imgs = np.vstack([np.hstack(i) for i in imgs])\n",
    "imgs = (imgs *255 ).astype(np.uint8)\n",
    "plt.figure()\n",
    "plt.axis('off')\n",
    "plt.title('Bras avant commande: top rows, '\n",
    "          'Bras apres commande: middle rows, '\n",
    "          'Reconstruction bras apres commande:  third rows')\n",
    "plt.imshow(imgs, interpolation='none', cmap='gray')\n",
    "Image.fromarray(imgs).save('reconstruction_body_image.png')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Couches intermédiaires"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(18000, 100)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "model = encoder  # create the original model\n",
    "\n",
    "layer_name = 'latent_fh4'\n",
    "intermediate_layer_model = Model(inputs=autoencoder.input,\n",
    "                                 outputs=model.get_layer(layer_name).output)\n",
    "encoded_imgs = intermediate_layer_model.predict(train_features_command)\n",
    "\n",
    "shape(encoded_imgs)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Les synérgies motrices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1440x576 with 40 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n = 40\n",
    "plt.figure(figsize=(20, 8))\n",
    "for i in range(n):\n",
    "    ax = plt.subplot(1, n, i+1)\n",
    "    plt.imshow(encoded_imgs[i].reshape(10,  10).T)\n",
    "    plt.gray()\n",
    "    ax.get_xaxis().set_visible(False)\n",
    "    ax.get_yaxis().set_visible(False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Activation de neurones particuliers décodeur"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 64)\n",
      "(1, 3)\n",
      "(1, 67)\n"
     ]
    }
   ],
   "source": [
    "tmp = np.zeros((1,64))\n",
    "tmp3 = np.zeros((1,3))\n",
    "print(shape(tmp))\n",
    "tmp[0][10] = 1\n",
    "tmp2 = reshape(posture[0], (1,3))\n",
    "print(shape(tmp2))\n",
    "conc = concatenate([tmp3, tmp], 1)\n",
    "print(shape(conc))\n",
    "conc2 = reshape(conc, (1,1,67))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Error when checking input: expected decoder_input to have shape (1, 103) but got array with shape (1, 67)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-31-546108faf92e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtest\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdecoder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconc2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/keras/engine/training.pyc\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, x, batch_size, verbose, steps)\u001b[0m\n\u001b[1;32m   1147\u001b[0m                              'argument.')\n\u001b[1;32m   1148\u001b[0m         \u001b[0;31m# Validate user data.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1149\u001b[0;31m         \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_standardize_user_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1150\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstateful\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1151\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0mbatch_size\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mbatch_size\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/keras/engine/training.pyc\u001b[0m in \u001b[0;36m_standardize_user_data\u001b[0;34m(self, x, y, sample_weight, class_weight, check_array_lengths, batch_size)\u001b[0m\n\u001b[1;32m    749\u001b[0m             \u001b[0mfeed_input_shapes\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    750\u001b[0m             \u001b[0mcheck_batch_axis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mFalse\u001b[0m\u001b[0;34m,\u001b[0m  \u001b[0;31m# Don't enforce the batch size.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 751\u001b[0;31m             exception_prefix='input')\n\u001b[0m\u001b[1;32m    752\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    753\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0my\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/keras/engine/training_utils.pyc\u001b[0m in \u001b[0;36mstandardize_input_data\u001b[0;34m(data, names, shapes, check_batch_axis, exception_prefix)\u001b[0m\n\u001b[1;32m    136\u001b[0m                             \u001b[0;34m': expected '\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mnames\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m' to have shape '\u001b[0m \u001b[0;34m+\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    137\u001b[0m                             \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m' but got array with shape '\u001b[0m \u001b[0;34m+\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 138\u001b[0;31m                             str(data_shape))\n\u001b[0m\u001b[1;32m    139\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    140\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Error when checking input: expected decoder_input to have shape (1, 103) but got array with shape (1, 67)"
     ]
    }
   ],
   "source": [
    "test = decoder.predict(conc2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "imshow(test[0][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "for i in range(64):\n",
    "    tmp = np.zeros((1,64))\n",
    "    tmp3 = np.zeros((1,3))\n",
    "    tmp[0][i] = 10\n",
    "    tmp2 = reshape(posture[0], (1,3))\n",
    "    conc = concatenate([tmp3, tmp], 1)\n",
    "    conc2 = reshape(conc, (1,1,67))\n",
    "    test = decoder.predict(conc2)\n",
    "    plt.figure()\n",
    "    plt.imshow(test[0][0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Activation de neurones particulier encodeur"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On prend un ensemble d'images avec une articulation fixe et on applique des deltas moteurs différents. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_images_x = zeros((nb_data, 1, img_size, img_size ), dtype = float32)\n",
    "train_images_y = zeros((nb_data, 1, img_size, img_size ), dtype = float32)\n",
    "train_data_x = zeros((nb_data, 1, 3))\n",
    "train_data_y = zeros((nb_data, 1, 3))\n",
    "\n",
    "command = zeros((nb_command, 3))\n",
    "command[:,0] = randrange(nb_command, 0, 1)*0\n",
    "command[:,1] = randrange(nb_command, 0, 1)*0.6\n",
    "command[:,2] = randrange(nb_command, 0, 1)*0\n",
    "\n",
    "idx = 0 \n",
    "for i in range(nb_posture):\n",
    "    for j in range(nb_command):\n",
    "        train_data_y[idx] = posture[0]  + command[j]\n",
    "        idx = idx + 1\n",
    "idx = 0 \n",
    "for i in range(nb_posture):\n",
    "    for j in range(nb_command):\n",
    "        train_data_x[idx] = posture[0]\n",
    "        idx = idx + 1\n",
    "\n",
    "        \n",
    "for i in range(nb_data):\n",
    "    img = zeros((img_size,img_size), dtype = uint8)\n",
    "    angle = train_data_x[i][0] \n",
    "    row1, col1 = img_size//2 + int(floor(L1*sin(angle[0]))), img_size//2 + int(floor(L1*cos(angle[0])))\n",
    "    row2, col2 =  int(floor(L2*sin(angle[1]))) + row1, col1 + int(floor(L2*cos(angle[1])))\n",
    "    row3, col3 = int(floor(L3*sin(angle[2])))+ row2, col2 +  int(floor(L3*cos(angle[2])))\n",
    "    r1, c1, val1 = line_aa(img_size//2,img_size//2,row1, col1)\n",
    "    r2, c2, val2 = line_aa(row1, col1, row2, col2)\n",
    "    r3, c3, val3 = line_aa(row2, col2, row3 , col3)\n",
    "    #r1, c1 = line(img_size//2,img_size//2,row1, col1)\n",
    "    #r2, c2 = line(row1, col1, row2, col2)\n",
    "    #r3, c3 = line(row2, col2, row3 , col3)\n",
    "    img[r1,c1] = val1 *255\n",
    "    img[r2,c2] = val2 *255\n",
    "    img[r3,c3] = val3 *255\n",
    "    train_images_x[i][0] = gaussian_filter(img , sigma = 1) / 255.\n",
    "\n",
    "for i in range(nb_data):\n",
    "    img = zeros((img_size,img_size), dtype = uint8)\n",
    "    angle = train_data_y[i][0] \n",
    "    row1, col1 = img_size//2 + int(floor(L1*sin(angle[0]))), img_size//2 + int(floor(L1*cos(angle[0])))\n",
    "    row2, col2 =  int(floor(L2*sin(angle[1]))) + row1, col1 + int(floor(L2*cos(angle[1])))\n",
    "    row3, col3 = int(floor(L3*sin(angle[2])))+ row2, col2 +  int(floor(L3*cos(angle[2])))\n",
    "    r1, c1, val1 = line_aa(img_size//2,img_size//2,row1, col1)\n",
    "    r2, c2, val2 = line_aa(row1, col1, row2, col2)\n",
    "    r3, c3, val3 = line_aa(row2, col2, row3 , col3)\n",
    "    #r1, c1 = line(img_size//2,img_size//2,row1, col1)\n",
    "    #r2, c2 = line(row1, col1, row2, col2)\n",
    "    #r3, c3 = line(row2, col2, row3 , col3)\n",
    "    img[r1,c1] = val1 *255\n",
    "    img[r2,c2] = val2 *255\n",
    "    img[r3,c3] = val3 *255\n",
    "    train_images_y[i][0] =gaussian_filter(img , sigma = 1) / 255.\n",
    "\n",
    "\n",
    "train_images_fixed_shoulder = concatenate([train_images_x, train_images_y], 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "shape(train_images_fixed_shoulder)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = encoder  # create the original model\n",
    "layer_name = 'latent_fh4'\n",
    "intermediate_layer_model = Model(inputs=autoencoder.input,\n",
    "                                 outputs=model.get_layer(layer_name).output)\n",
    "intermediate_output = intermediate_layer_model.predict(train_images_fixed_shoulder)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.15rc1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
